procedure InitSajetDll(ParentApplication: TApplication ;uLimit, lLimit : Double ;WeightModel : string='DDT-A1000') ; stdcall; export;
procedure InitDllForm;  stdcall; export;
procedure CloseSajetDll; stdcall; export;
function  ShowWeightForm(DelayTime : double = 0.5) : string; stdcall; export;
function  GetProductWeidght(DelayTime : Double  = 0.5) : string ; stdcall; export;
procedure ShowDllForm ; stdcall; export;



//Ω’•Œ§Ë™k
type
  TInitSajetDll = procedure(ParentApplication: TApplication ;uLimit, lLimit : double; WeightModel : string); stdcall;
  TInitDllForm  = procedure ; stdcall;
  TCloseSajetDll = procedure; stdcall;
  TShowWeightForm = function (wTime: double): string ; stdcall;
  TGetProductWeidght = function (wTime: double) : string ; stdcall;
  TShowDllForm = procedure; stdcall;

  private
    { Private declarations }
    m_DLLHandle: THandle;
    m_sDLLName : string ;
    m_InitialSajetDll : TInitSajetDll ;
    m_InitDllForm : TInitDllForm;
    m_CloseSajetDll: TCloseSajetDll;
    m_ShowDllForm :TShowDllForm ;


  procedure LoadWeightDll(f_sDllName : string) ;
  begin
    try
      f_sDllName := UpperCase(f_sDllName);
      //îWœƒí˙LOAD DRIVERêﬁ™µïg∑¸ñI
      //if (m_sDLLName <> '') then closeSajetDll;

      m_DLLHandle := LoadLibrary(pchar(ExtractFilePath(Application.exename) + f_sDLLName));
      if m_DLLHandle <= 32 then raise Exception.create('Can Not Find DLL File(' + f_sDllName + ')');
      m_sDLLName := f_sDLLName;

      m_InitialSajetDll := GetProcAddress(m_DLLHandle, 'InitSajetDll');
      if (@m_initialSajetDll = nil) then raise Exception.Create('DLL Function Not Match (1)');

      m_CloseSajetDll := GetProcAddress(m_DLLHandle, 'CloseSajetDll');
      if (@m_closeSajetDll = nil) then raise Exception.Create('DLL Function Not Match (2)');

      m_ShowWeightFormDll := GetProcAddress(m_DLLHandle, 'ShowWeightForm');
      if (@m_ShowWeightFormDll = nil) then raise Exception.Create('DLL Function Not Match (3)');

      m_GetProductWeidghtDll := GetProcAddress(m_DLLHandle, 'GetProductWeidght');
      if (@m_GetProductWeidghtDll = nil) then raise Exception.Create('DLL Function Not Match (4)');

      m_ShowDllForm := GetProcAddress(m_DLLHandle, 'ShowDllForm');
      if (@m_ShowDllForm = nil) then raise Exception.Create('DLL Function Not Match (5)');

      m_InitDllForm := GetProcAddress(m_DLLHandle, 'InitDllForm');
      if (@m_InitDllForm = nil) then raise Exception.Create('DLL Function Not Match (InitDllForm)');

    except
      on E: Exception do raise Exception.create('(' + ClassName + '.LoadSajetDll)' + E.Message);
    end;
  end;


procedure TForm1.FormCloseQuery(Sender: TObject; var CanClose: Boolean);
  procedure CloseWeightDll;
  begin
    m_DLLHandle := LoadLibrary(pchar(f_sDllName));
    m_CloseSajetDll;
    FreeLibrary(m_DLLHandle);
  end;
begin
  CloseWeightDll;
end;